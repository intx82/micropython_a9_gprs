variables:
  MAKEOPTS: "-j4"

jobs:
- job: port_stm32
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      sudo add-apt-repository -y ppa:team-gcc-arm-embedded/ppa
      sudo apt-get update -qq || true
      sudo apt-get install gcc-arm-embedded
      sudo apt-get install libnewlib-arm-none-eabi
      arm-none-eabi-gcc --version
    displayName: 'Install dependencies'

  - script: |
      make $(MAKEOPTS) -C mpy-cross
      make $(MAKEOPTS) -C ports/stm32
      make $(MAKEOPTS) -C ports/stm32 BOARD=PYBV11 MICROPY_PY_WIZNET5K=5200 MICROPY_PY_CC3K=1
      make $(MAKEOPTS) -C ports/stm32 BOARD=STM32F769DISC
      make $(MAKEOPTS) -C ports/stm32 BOARD=STM32L476DISC
    displayName: 'Build'

- job: port_qemu_arm
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      sudo apt-get install gcc-arm-none-eabi
      sudo apt-get install libnewlib-arm-none-eabi
      sudo apt-get install qemu-system
      arm-none-eabi-gcc --version
      qemu-system-arm --version
    displayName: 'Install dependencies'

  - script: |
      make $(MAKEOPTS) -C mpy-cross
      make $(MAKEOPTS) -C ports/qemu-arm -f Makefile.test test
    displayName: 'Build'

- job: test_unix
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      sudo pip install cpp-coveralls
      gcc --version
      python3 --version
    displayName: 'Install dependencies'

  - script: |
      make $(MAKEOPTS) -C mpy-cross
      make $(MAKEOPTS) -C ports/unix deplibs
      make $(MAKEOPTS) -C ports/unix coverage
      # run the main test suite
      (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests)
      (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -d thread)
      (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --emit native)
      (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --via-mpy -d basics float micropython)
      (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --via-mpy --emit native -d basics float micropython)
      # test when input script comes from stdin
      cat tests/basics/0prelim.py | ports/unix/micropython_coverage | grep -q 'abc'
      # run coveralls coverage analysis (try to, even if some builds/tests failed)
      (cd ports/unix && coveralls --root ../.. --build-root . --gcov $(which gcov) --gcov-options '\-o build-coverage/' --include py --include extmod)
    displayName: 'Test'

- job: port_unix
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      make $(MAKEOPTS) -C mpy-cross
      make $(MAKEOPTS) -C ports/unix deplibs
      make $(MAKEOPTS) -C ports/unix
      make $(MAKEOPTS) -C ports/unix test
    displayName: 'Build'

- job: 'unix nanbox port build and tests'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      sudo apt-get install gcc-multilib libffi-dev:i386
    displayName: 'Install dependencies'

  - script: |
      make $(MAKEOPTS) -C mpy-cross
      make $(MAKEOPTS) -C ports/unix deplibs
      make $(MAKEOPTS) -C ports/unix nanbox
      (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_nanbox ./run-tests)
    displayName: 'Build'

- job: port_unix_stackless
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      make $(MAKEOPTS) -C mpy-cross
      make $(MAKEOPTS) -C ports/unix deplibs
      make $(MAKEOPTS) -C ports/unix CFLAGS_EXTRA="-DMICROPY_STACKLESS=1 -DMICROPY_STACKLESS_STRICT=1"
      make $(MAKEOPTS) -C ports/unix test
    displayName: 'Build'

- job: port_mingw
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      sudo apt-get install gcc-mingw-w64
    displayName: 'Install dependencies'

  - script: |
      make $(MAKEOPTS) -C mpy-cross
      make $(MAKEOPTS) -C ports/windows CROSS_COMPILE=i686-w64-mingw32-
    displayName: 'Build'

- job: port_gprs_a9
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: sudo apt-get install build-essential gcc-multilib g++-multilib libzip-dev zlib1g lib32z1
    displayName: 'Install dependencies'

  - script: |
      cd ports/gprs_a9
      make
    displayName: 'Build'

  - task: GitHubRelease@0
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      gitHubConnection: 'github-pulkin'
      repositoryName: 'pulkin/micropython'
      action: 'edit'
      target: '$(Build.SourceVersion)'
      tag: 'latest-build'
      title: 'Latest master build'
      releaseNotesSource: 'input'
      releaseNotes: 'This is an automatic build triggered on `master` changes'
      assets: 'ports/gprs_a9/hex/firmware_debug_full.lod'
      assetUploadMode: 'replace'
      isPreRelease: true
      addChangeLog: false
